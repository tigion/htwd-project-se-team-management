"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import ldap
from django_auth_ldap.config import LDAPSearch
from dotenv import load_dotenv
import os

# load environment variables from .env (if exist for local tests) in django root
# - don't overwrites environment variables from docker (compose.yaml)
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "False") == "True"

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "localhost").split(" ")
# ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

CSRF_TRUSTED_ORIGINS = os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(" ")
# CSRF_TRUSTED_ORIGINS = ["http://localhost", "https://localhost"]
# CORS_ORIGIN_WHITELIST = []

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # extra
    "django_bootstrap5",
    "app",
    "poll",
    "team",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = "en-us"
LANGUAGE_CODE = "de-de"
# TIME_ZONE = "UTC"
TIME_ZONE = "Europe/Berlin"

USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# login url
LOGIN_URL = "login"


# --- AUTHENTICATION BACKENDS -----------------------------------------

# register Django-Admin and LDAP as authentication backends
AUTHENTICATION_BACKENDS = [
    # 1.
    "django.contrib.auth.backends.ModelBackend",
    # 2.
    # LDAP will be added separately in LDAP Settings
]


# --- LDAP Settings ---------------------------------------------------

if os.getenv("DJANGO_LDAP", "False") == "True":
    # Add LDAP authentucation backend
    AUTHENTICATION_BACKENDS.append("django_auth_ldap.backend.LDAPBackend")

    # timeout if LDAP server is not available
    ldap.set_option(ldap.OPT_NETWORK_TIMEOUT, 3)
    # ldap.set_option(ldap.OPT_TIMEOUT, 1)
    # ldap.protocol_version = ldap.VERSION3
    # ldap.network_timeout = 1
    # ldap.timelimit = 1

    # LDAP-server
    AUTH_LDAP_SERVER_URI = os.environ.get("DJANGO_LDAP_SERVER_URI")
    AUTH_LDAP_BIND_DN = os.environ.get("DJANGO_AUTH_LDAP_BIND_DN")
    AUTH_LDAP_BIND_PASSWORD = os.environ.get("DJANGO_AUTH_LDAP_BIND_PASSWORD")
    AUTH_LDAP_USER_SEARCH = LDAPSearch(
        os.environ.get("DJANGO_AUTH_LDAP_USER_SEARCH_BASE_DN"),
        ldap.SCOPE_SUBTREE,
        os.getenv("DJANGO_AUTH_LDAP_USER_SEARCH_FILTER", ""),
    )

    AUTH_LDAP_START_TLS = True

    # without LDAP CA
    AUTH_LDAP_GLOBAL_OPTIONS = {
        ldap.OPT_REFERRALS: 0,
        ldap.OPT_DEBUG_LEVEL: 0,  # 1,
        ldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_NEVER,
        ldap.OPT_X_TLS_NEWCTX: 0,
    }
    # with LDAP CA
    # LDAP_CA_FILE_PATH = "/var/www/ssl/htw_ldap_ca.crt"
    # AUTH_LDAP_CONNECTION_OPTIONS = {
    #     ldap.OPT_X_TLS_CACERTFILE: LDAP_CA_FILE_PATH,
    #     ldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_ALLOW,
    #     ldap.OPT_X_TLS_NEWCTX: 0,
    # }

    # seconds, a userâ€™s group memberships and distinguished name are cached
    AUTH_LDAP_CACHE_TIMEOUT = 3600

    # Populate the Django user from the LDAP directory.
    # AUTH_LDAP_USER_ATTR_MAP = {
    #     "first_name": "givenName",
    #     "last_name": "sn",
    # #     "email": "mail",
    # }


# --- LOGGING ---------------------------------------------------------

LOGGING_DIR = BASE_DIR / "logs"
if not LOGGING_DIR.is_dir():
    LOGGING_DIR.mkdir()
LOGGING_FILE = LOGGING_DIR / "django.log"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    # "root": {
    #     "level": "WARNING",
    #     "handlers": ["file"],
    # },
    "handlers": {
        "file": {
            "level": "WARNING",
            # "class": "logging.FileHandler",
            # for maxBytes, backupCount
            "class": "logging.handlers.RotatingFileHandler",
            # 'logs' folder is required
            "filename": LOGGING_FILE,
            "maxBytes": 1 * 1024 * 1024,
            "backupCount": 10,
            "formatter": "app",
        },
    },
    "loggers": {
        "": {
            "handlers": ["file"],
            "level": "WARNING",
            "propagate": True,
        },
    },
    "formatters": {
        "app": {
            "format": (
                "%(asctime)s [%(levelname)-8s] " "(%(module)s.%(funcName)s) %(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
}
